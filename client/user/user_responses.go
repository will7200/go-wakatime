// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/will7200/go-wakatime/models"
)

// UserReader is a Reader for the User structure.
type UserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserOK creates a UserOK with default headers values
func NewUserOK() *UserOK {
	return &UserOK{}
}

/*UserOK handles this case with default header values.

The request has succeeded.
*/
type UserOK struct {
	Payload *UserOKBody
}

func (o *UserOK) Error() string {
	return fmt.Sprintf("[GET /users/{user}][%d] userOK  %+v", 200, o.Payload)
}

func (o *UserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserUnauthorized creates a UserUnauthorized with default headers values
func NewUserUnauthorized() *UserUnauthorized {
	return &UserUnauthorized{}
}

/*UserUnauthorized handles this case with default header values.

The request requires authentication, or your authentication was invalid.
*/
type UserUnauthorized struct {
	Payload *models.Error
}

func (o *UserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{user}][%d] userUnauthorized  %+v", 401, o.Payload)
}

func (o *UserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserNotFound creates a UserNotFound with default headers values
func NewUserNotFound() *UserNotFound {
	return &UserNotFound{}
}

/*UserNotFound handles this case with default header values.

The resource does not exist.
*/
type UserNotFound struct {
	Payload *models.Error
}

func (o *UserNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user}][%d] userNotFound  %+v", 404, o.Payload)
}

func (o *UserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UserOKBody user o k body
swagger:model UserOKBody
*/
type UserOKBody struct {

	// data
	Data *models.User `json:"data,omitempty"`
}

// Validate validates this user o k body
func (o *UserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserOKBody) UnmarshalBinary(b []byte) error {
	var res UserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
