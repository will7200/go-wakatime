// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/will7200/wakatime/models"
)

// GoalsReader is a Reader for the Goals structure.
type GoalsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GoalsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGoalsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGoalsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGoalsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGoalsOK creates a GoalsOK with default headers values
func NewGoalsOK() *GoalsOK {
	return &GoalsOK{}
}

/*GoalsOK handles this case with default header values.

The request has succeeded.
*/
type GoalsOK struct {
	Payload *models.Goals
}

func (o *GoalsOK) Error() string {
	return fmt.Sprintf("[GET /users/{user}/goals][%d] goalsOK  %+v", 200, o.Payload)
}

func (o *GoalsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Goals)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoalsUnauthorized creates a GoalsUnauthorized with default headers values
func NewGoalsUnauthorized() *GoalsUnauthorized {
	return &GoalsUnauthorized{}
}

/*GoalsUnauthorized handles this case with default header values.

The request requires authentication, or your authentication was invalid.
*/
type GoalsUnauthorized struct {
	Payload *models.Error
}

func (o *GoalsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{user}/goals][%d] goalsUnauthorized  %+v", 401, o.Payload)
}

func (o *GoalsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGoalsNotFound creates a GoalsNotFound with default headers values
func NewGoalsNotFound() *GoalsNotFound {
	return &GoalsNotFound{}
}

/*GoalsNotFound handles this case with default header values.

The resource does not exist.
*/
type GoalsNotFound struct {
}

func (o *GoalsNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user}/goals][%d] goalsNotFound ", 404)
}

func (o *GoalsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
