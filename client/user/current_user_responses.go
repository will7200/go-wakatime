// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/will7200/wakatime/models"
)

// CurrentUserReader is a Reader for the CurrentUser structure.
type CurrentUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CurrentUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCurrentUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCurrentUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCurrentUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCurrentUserOK creates a CurrentUserOK with default headers values
func NewCurrentUserOK() *CurrentUserOK {
	return &CurrentUserOK{}
}

/*CurrentUserOK handles this case with default header values.

Get the current User.
*/
type CurrentUserOK struct {
	Payload *CurrentUserOKBody
}

func (o *CurrentUserOK) Error() string {
	return fmt.Sprintf("[GET /users/current][%d] currentUserOK  %+v", 200, o.Payload)
}

func (o *CurrentUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CurrentUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrentUserUnauthorized creates a CurrentUserUnauthorized with default headers values
func NewCurrentUserUnauthorized() *CurrentUserUnauthorized {
	return &CurrentUserUnauthorized{}
}

/*CurrentUserUnauthorized handles this case with default header values.

The request requires authentication, or your authentication was invalid.
*/
type CurrentUserUnauthorized struct {
	Payload *models.Error
}

func (o *CurrentUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/current][%d] currentUserUnauthorized  %+v", 401, o.Payload)
}

func (o *CurrentUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCurrentUserNotFound creates a CurrentUserNotFound with default headers values
func NewCurrentUserNotFound() *CurrentUserNotFound {
	return &CurrentUserNotFound{}
}

/*CurrentUserNotFound handles this case with default header values.

The resource does not exist.
*/
type CurrentUserNotFound struct {
}

func (o *CurrentUserNotFound) Error() string {
	return fmt.Sprintf("[GET /users/current][%d] currentUserNotFound ", 404)
}

func (o *CurrentUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*CurrentUserOKBody current user o k body
swagger:model CurrentUserOKBody
*/
type CurrentUserOKBody struct {

	// data
	Data *models.User `json:"data,omitempty"`
}

// Validate validates this current user o k body
func (o *CurrentUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CurrentUserOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentUserOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CurrentUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CurrentUserOKBody) UnmarshalBinary(b []byte) error {
	var res CurrentUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
