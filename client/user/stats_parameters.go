// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStatsParams creates a new StatsParams object
// with the default values initialized.
func NewStatsParams() *StatsParams {
	var (
		rangeVarDefault = string("last_7_days")
		userDefault     = string("current")
	)
	return &StatsParams{
		Range: rangeVarDefault,
		User:  userDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewStatsParamsWithTimeout creates a new StatsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatsParamsWithTimeout(timeout time.Duration) *StatsParams {
	var (
		rangeVarDefault = string("last_7_days")
		userDefault     = string("current")
	)
	return &StatsParams{
		Range: rangeVarDefault,
		User:  userDefault,

		timeout: timeout,
	}
}

// NewStatsParamsWithContext creates a new StatsParams object
// with the default values initialized, and the ability to set a context for a request
func NewStatsParamsWithContext(ctx context.Context) *StatsParams {
	var (
		rangeDefault = string("last_7_days")
		userDefault  = string("current")
	)
	return &StatsParams{
		Range: rangeDefault,
		User:  userDefault,

		Context: ctx,
	}
}

// NewStatsParamsWithHTTPClient creates a new StatsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatsParamsWithHTTPClient(client *http.Client) *StatsParams {
	var (
		rangeDefault = string("last_7_days")
		userDefault  = string("current")
	)
	return &StatsParams{
		Range:      rangeDefault,
		User:       userDefault,
		HTTPClient: client,
	}
}

/*StatsParams contains all the parameters to send to the API endpoint
for the stats operation typically these are written to a http.Request
*/
type StatsParams struct {

	/*Range
	  Range activity

	*/
	Range string
	/*User
	  ID of the user to obtain

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stats params
func (o *StatsParams) WithTimeout(timeout time.Duration) *StatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stats params
func (o *StatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stats params
func (o *StatsParams) WithContext(ctx context.Context) *StatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stats params
func (o *StatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stats params
func (o *StatsParams) WithHTTPClient(client *http.Client) *StatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stats params
func (o *StatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRange adds the rangeVar to the stats params
func (o *StatsParams) WithRange(rangeVar string) *StatsParams {
	o.SetRange(rangeVar)
	return o
}

// SetRange adds the range to the stats params
func (o *StatsParams) SetRange(rangeVar string) {
	o.Range = rangeVar
}

// WithUser adds the user to the stats params
func (o *StatsParams) WithUser(user string) *StatsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the stats params
func (o *StatsParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *StatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param range
	if err := r.SetPathParam("range", o.Range); err != nil {
		return err
	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
