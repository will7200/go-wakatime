// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSummariesParams creates a new SummariesParams object
// with the default values initialized.
func NewSummariesParams() *SummariesParams {
	var (
		userDefault = string("current")
	)
	return &SummariesParams{
		User: userDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSummariesParamsWithTimeout creates a new SummariesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSummariesParamsWithTimeout(timeout time.Duration) *SummariesParams {
	var (
		userDefault = string("current")
	)
	return &SummariesParams{
		User: userDefault,

		timeout: timeout,
	}
}

// NewSummariesParamsWithContext creates a new SummariesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSummariesParamsWithContext(ctx context.Context) *SummariesParams {
	var (
		userDefault = string("current")
	)
	return &SummariesParams{
		User: userDefault,

		Context: ctx,
	}
}

// NewSummariesParamsWithHTTPClient creates a new SummariesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSummariesParamsWithHTTPClient(client *http.Client) *SummariesParams {
	var (
		userDefault = string("current")
	)
	return &SummariesParams{
		User:       userDefault,
		HTTPClient: client,
	}
}

/*SummariesParams contains all the parameters to send to the API endpoint
for the summaries operation typically these are written to a http.Request
*/
type SummariesParams struct {

	/*Branches
	  Only show durations for these branches; comma separated list of branch names.

	*/
	Branches *string
	/*End
	  End date of the time range.

	*/
	End strfmt.Date
	/*Project
	  Only show durations for this project.

	*/
	Project *string
	/*Start
	  End date of the time range.

	*/
	Start strfmt.Date
	/*User
	  ID of the user to obtain

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the summaries params
func (o *SummariesParams) WithTimeout(timeout time.Duration) *SummariesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the summaries params
func (o *SummariesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the summaries params
func (o *SummariesParams) WithContext(ctx context.Context) *SummariesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the summaries params
func (o *SummariesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the summaries params
func (o *SummariesParams) WithHTTPClient(client *http.Client) *SummariesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the summaries params
func (o *SummariesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranches adds the branches to the summaries params
func (o *SummariesParams) WithBranches(branches *string) *SummariesParams {
	o.SetBranches(branches)
	return o
}

// SetBranches adds the branches to the summaries params
func (o *SummariesParams) SetBranches(branches *string) {
	o.Branches = branches
}

// WithEnd adds the end to the summaries params
func (o *SummariesParams) WithEnd(end strfmt.Date) *SummariesParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the summaries params
func (o *SummariesParams) SetEnd(end strfmt.Date) {
	o.End = end
}

// WithProject adds the project to the summaries params
func (o *SummariesParams) WithProject(project *string) *SummariesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the summaries params
func (o *SummariesParams) SetProject(project *string) {
	o.Project = project
}

// WithStart adds the start to the summaries params
func (o *SummariesParams) WithStart(start strfmt.Date) *SummariesParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the summaries params
func (o *SummariesParams) SetStart(start strfmt.Date) {
	o.Start = start
}

// WithUser adds the user to the summaries params
func (o *SummariesParams) WithUser(user string) *SummariesParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the summaries params
func (o *SummariesParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *SummariesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Branches != nil {

		// query param branches
		var qrBranches string
		if o.Branches != nil {
			qrBranches = *o.Branches
		}
		qBranches := qrBranches
		if qBranches != "" {
			if err := r.SetQueryParam("branches", qBranches); err != nil {
				return err
			}
		}

	}

	// query param end
	qrEnd := o.End
	qEnd := qrEnd.String()
	if qEnd != "" {
		if err := r.SetQueryParam("end", qEnd); err != nil {
			return err
		}
	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	// query param start
	qrStart := o.Start
	qStart := qrStart.String()
	if qStart != "" {
		if err := r.SetQueryParam("start", qStart); err != nil {
			return err
		}
	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
