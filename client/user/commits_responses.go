// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/will7200/go-wakatime/models"
)

// CommitsReader is a Reader for the Commits structure.
type CommitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCommitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCommitsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCommitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCommitsOK creates a CommitsOK with default headers values
func NewCommitsOK() *CommitsOK {
	return &CommitsOK{}
}

/*CommitsOK handles this case with default header values.

The request has succeeded.
*/
type CommitsOK struct {
	Payload *models.Commits
}

func (o *CommitsOK) Error() string {
	return fmt.Sprintf("[GET /users/{user}/project/{project}/commits][%d] commitsOK  %+v", 200, o.Payload)
}

func (o *CommitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commits)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitsUnauthorized creates a CommitsUnauthorized with default headers values
func NewCommitsUnauthorized() *CommitsUnauthorized {
	return &CommitsUnauthorized{}
}

/*CommitsUnauthorized handles this case with default header values.

The request requires authentication, or your authentication was invalid.
*/
type CommitsUnauthorized struct {
	Payload *models.Error
}

func (o *CommitsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{user}/project/{project}/commits][%d] commitsUnauthorized  %+v", 401, o.Payload)
}

func (o *CommitsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitsNotFound creates a CommitsNotFound with default headers values
func NewCommitsNotFound() *CommitsNotFound {
	return &CommitsNotFound{}
}

/*CommitsNotFound handles this case with default header values.

The resource does not exist.
*/
type CommitsNotFound struct {
}

func (o *CommitsNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user}/project/{project}/commits][%d] commitsNotFound ", 404)
}

func (o *CommitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
