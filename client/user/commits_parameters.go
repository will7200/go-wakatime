// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCommitsParams creates a new CommitsParams object
// with the default values initialized.
func NewCommitsParams() *CommitsParams {
	var (
		userDefault = string("current")
	)
	return &CommitsParams{
		User: userDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCommitsParamsWithTimeout creates a new CommitsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCommitsParamsWithTimeout(timeout time.Duration) *CommitsParams {
	var (
		userDefault = string("current")
	)
	return &CommitsParams{
		User: userDefault,

		timeout: timeout,
	}
}

// NewCommitsParamsWithContext creates a new CommitsParams object
// with the default values initialized, and the ability to set a context for a request
func NewCommitsParamsWithContext(ctx context.Context) *CommitsParams {
	var (
		userDefault = string("current")
	)
	return &CommitsParams{
		User: userDefault,

		Context: ctx,
	}
}

// NewCommitsParamsWithHTTPClient creates a new CommitsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCommitsParamsWithHTTPClient(client *http.Client) *CommitsParams {
	var (
		userDefault = string("current")
	)
	return &CommitsParams{
		User:       userDefault,
		HTTPClient: client,
	}
}

/*CommitsParams contains all the parameters to send to the API endpoint
for the commits operation typically these are written to a http.Request
*/
type CommitsParams struct {

	/*Author
	  Filter commits to only those authored by the given username.

	*/
	Author *string
	/*Page
	  Page number of commit.

	*/
	Page *int64
	/*Project
	  Project Nam

	*/
	Project string
	/*User
	  ID of the user to obtain

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the commits params
func (o *CommitsParams) WithTimeout(timeout time.Duration) *CommitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commits params
func (o *CommitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commits params
func (o *CommitsParams) WithContext(ctx context.Context) *CommitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commits params
func (o *CommitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commits params
func (o *CommitsParams) WithHTTPClient(client *http.Client) *CommitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commits params
func (o *CommitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthor adds the author to the commits params
func (o *CommitsParams) WithAuthor(author *string) *CommitsParams {
	o.SetAuthor(author)
	return o
}

// SetAuthor adds the author to the commits params
func (o *CommitsParams) SetAuthor(author *string) {
	o.Author = author
}

// WithPage adds the page to the commits params
func (o *CommitsParams) WithPage(page *int64) *CommitsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the commits params
func (o *CommitsParams) SetPage(page *int64) {
	o.Page = page
}

// WithProject adds the project to the commits params
func (o *CommitsParams) WithProject(project string) *CommitsParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the commits params
func (o *CommitsParams) SetProject(project string) {
	o.Project = project
}

// WithUser adds the user to the commits params
func (o *CommitsParams) WithUser(user string) *CommitsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the commits params
func (o *CommitsParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *CommitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Author != nil {

		// query param author
		var qrAuthor string
		if o.Author != nil {
			qrAuthor = *o.Author
		}
		qAuthor := qrAuthor
		if qAuthor != "" {
			if err := r.SetQueryParam("author", qAuthor); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
