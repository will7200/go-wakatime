// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Summaries summaries
// swagger:model summaries
type Summaries struct {

	// data
	Data []*SummariesDataItems0 `json:"data"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`
}

// Validate validates this summaries
func (m *Summaries) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Summaries) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Summaries) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Summaries) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Summaries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Summaries) UnmarshalBinary(b []byte) error {
	var res Summaries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SummariesDataItems0 summaries data items0
// swagger:model SummariesDataItems0
type SummariesDataItems0 struct {

	// categories
	Categories []*StatsCategory `json:"categories"`

	// dependencies
	Dependencies []*StatsCategory `json:"dependencies"`

	// editors
	Editors []*StatsCategory `json:"editors"`

	// grand total
	GrandTotal *SummariesDataItems0GrandTotal `json:"grand_total,omitempty"`

	// languages
	Languages []*StatsCategory `json:"languages"`

	// operating systems
	OperatingSystems []*StatsCategory `json:"operating_systems"`

	// projects
	Projects []*StatsCategory `json:"projects"`

	// range
	Range *SummariesDataItems0Range `json:"range,omitempty"`
}

// Validate validates this summaries data items0
func (m *SummariesDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEditors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrandTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummariesDataItems0) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateEditors(formats strfmt.Registry) error {

	if swag.IsZero(m.Editors) { // not required
		return nil
	}

	for i := 0; i < len(m.Editors); i++ {
		if swag.IsZero(m.Editors[i]) { // not required
			continue
		}

		if m.Editors[i] != nil {
			if err := m.Editors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateGrandTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.GrandTotal) { // not required
		return nil
	}

	if m.GrandTotal != nil {
		if err := m.GrandTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grand_total")
			}
			return err
		}
	}

	return nil
}

func (m *SummariesDataItems0) validateLanguages(formats strfmt.Registry) error {

	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateOperatingSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystems) { // not required
		return nil
	}

	for i := 0; i < len(m.OperatingSystems); i++ {
		if swag.IsZero(m.OperatingSystems[i]) { // not required
			continue
		}

		if m.OperatingSystems[i] != nil {
			if err := m.OperatingSystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operating_systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummariesDataItems0) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummariesDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummariesDataItems0) UnmarshalBinary(b []byte) error {
	var res SummariesDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SummariesDataItems0GrandTotal summaries data items0 grand total
// swagger:model SummariesDataItems0GrandTotal
type SummariesDataItems0GrandTotal struct {

	// digital
	Digital string `json:"digital,omitempty"`

	// hours
	Hours int64 `json:"hours,omitempty"`

	// minutes
	Minutes int64 `json:"minutes,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// total seconds
	TotalSeconds int64 `json:"total_seconds,omitempty"`
}

// Validate validates this summaries data items0 grand total
func (m *SummariesDataItems0GrandTotal) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SummariesDataItems0GrandTotal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummariesDataItems0GrandTotal) UnmarshalBinary(b []byte) error {
	var res SummariesDataItems0GrandTotal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SummariesDataItems0Range summaries data items0 range
// swagger:model SummariesDataItems0Range
type SummariesDataItems0Range struct {

	// date
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this summaries data items0 range
func (m *SummariesDataItems0Range) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummariesDataItems0Range) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SummariesDataItems0Range) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SummariesDataItems0Range) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummariesDataItems0Range) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummariesDataItems0Range) UnmarshalBinary(b []byte) error {
	var res SummariesDataItems0Range
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
