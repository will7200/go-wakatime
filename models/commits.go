// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Commits commits
// swagger:model commits
type Commits struct {

	// author
	Author *string `json:"author,omitempty"`

	// commits
	Commits []*CommitsItems0 `json:"commits"`

	// next page
	NextPage *int64 `json:"next_page,omitempty"`

	// next page url
	NextPageURL *string `json:"next_page_url,omitempty"`

	// page
	Page int64 `json:"page,omitempty"`

	// prev page
	PrevPage *int64 `json:"prev_page,omitempty"`

	// prev page url
	PrevPageURL *string `json:"prev_page_url,omitempty"`

	// project
	Project *CommitsProject `json:"project,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// total pages
	TotalPages int64 `json:"total_pages,omitempty"`
}

// Validate validates this commits
func (m *Commits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Commits) validateCommits(formats strfmt.Registry) error {

	if swag.IsZero(m.Commits) { // not required
		return nil
	}

	for i := 0; i < len(m.Commits); i++ {
		if swag.IsZero(m.Commits[i]) { // not required
			continue
		}

		if m.Commits[i] != nil {
			if err := m.Commits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Commits) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Commits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Commits) UnmarshalBinary(b []byte) error {
	var res Commits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitsItems0 commits items0
// swagger:model CommitsItems0
type CommitsItems0 struct {

	// author avatar url
	AuthorAvatarURL string `json:"author_avatar_url,omitempty"`

	// author date
	AuthorDate string `json:"author_date,omitempty"`

	// author email
	AuthorEmail string `json:"author_email,omitempty"`

	// author html url
	AuthorHTMLURL string `json:"author_html_url,omitempty"`

	// author name
	AuthorName string `json:"author_name,omitempty"`

	// author url
	AuthorURL string `json:"author_url,omitempty"`

	// author username
	AuthorUsername string `json:"author_username,omitempty"`

	// committer avatar url
	CommitterAvatarURL string `json:"committer_avatar_url,omitempty"`

	// committer date
	CommitterDate string `json:"committer_date,omitempty"`

	// committer email
	CommitterEmail string `json:"committer_email,omitempty"`

	// committer html url
	CommitterHTMLURL string `json:"committer_html_url,omitempty"`

	// committer name
	CommitterName string `json:"committer_name,omitempty"`

	// committer url
	CommitterURL string `json:"committer_url,omitempty"`

	// committer username
	CommitterUsername string `json:"committer_username,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// human readable total
	HumanReadableTotal string `json:"human_readable_total,omitempty"`

	// human readable total with seconds
	HumanReadableTotalWithSeconds string `json:"human_readable_total_with_seconds,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// total seconds
	TotalSeconds float64 `json:"total_seconds,omitempty"`

	// truncated hash
	TruncatedHash string `json:"truncated_hash,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits items0
func (m *CommitsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitsItems0) UnmarshalBinary(b []byte) error {
	var res CommitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitsProject commits project
// swagger:model CommitsProject
type CommitsProject struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// html escaped name
	HTMLEscapedName string `json:"html_escaped_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// privacy
	Privacy string `json:"privacy,omitempty"`

	// repository
	Repository *CommitsProjectRepository `json:"repository,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this commits project
func (m *CommitsProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitsProject) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("project"+"."+"created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CommitsProject) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project" + "." + "repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitsProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitsProject) UnmarshalBinary(b []byte) error {
	var res CommitsProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommitsProjectRepository commits project repository
// swagger:model CommitsProjectRepository
type CommitsProjectRepository struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fork count
	ForkCount int64 `json:"fork_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// homepage
	Homepage *string `json:"homepage,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is fork
	IsFork bool `json:"is_fork,omitempty"`

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// last synced at
	LastSyncedAt string `json:"last_synced_at,omitempty"`

	// modified at
	ModifiedAt string `json:"modified_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// star count
	StarCount int64 `json:"star_count,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// watch count
	WatchCount int64 `json:"watch_count,omitempty"`
}

// Validate validates this commits project repository
func (m *CommitsProjectRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommitsProjectRepository) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("project"+"."+"repository"+"."+"created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommitsProjectRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommitsProjectRepository) UnmarshalBinary(b []byte) error {
	var res CommitsProjectRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
