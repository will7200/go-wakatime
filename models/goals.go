// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Goals goals
// swagger:model goals
type Goals struct {

	// data
	Data []*GoalsDataItems0 `json:"data"`

	// total
	Total int64 `json:"total,omitempty"`

	// total pages
	TotalPages int64 `json:"total_pages,omitempty"`
}

// Validate validates this goals
func (m *Goals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Goals) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Goals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Goals) UnmarshalBinary(b []byte) error {
	var res Goals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GoalsDataItems0 goals data items0
// swagger:model GoalsDataItems0
type GoalsDataItems0 struct {

	// average status
	AverageStatus string `json:"average_status,omitempty"`

	// chart data
	ChartData []*GoalsDataItems0ChartDataItems0 `json:"chart_data"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// cumulative status
	CumulativeStatus string `json:"cumulative_status,omitempty"`

	// delta
	Delta string `json:"delta,omitempty"`

	// editors
	Editors []interface{} `json:"editors"`

	// id
	ID string `json:"id,omitempty"`

	// ignore days
	IgnoreDays []interface{} `json:"ignore_days"`

	// improve by percent
	ImproveByPercent float64 `json:"improve_by_percent,omitempty"`

	// is current user owner
	IsCurrentUserOwner bool `json:"is_current_user_owner,omitempty"`

	// is enabled
	IsEnabled bool `json:"is_enabled,omitempty"`

	// is inverse
	IsInverse bool `json:"is_inverse,omitempty"`

	// is snoozed
	IsSnoozed bool `json:"is_snoozed,omitempty"`

	// languages
	Languages []interface{} `json:"languages"`

	// modified at
	// Format: date-time
	ModifiedAt strfmt.DateTime `json:"modified_at,omitempty"`

	// owner
	Owner *GoalsDataItems0Owner `json:"owner,omitempty"`

	// projects
	Projects []interface{} `json:"projects"`

	// range text
	RangeText string `json:"range_text,omitempty"`

	// seconds
	Seconds int64 `json:"seconds,omitempty"`

	// shared with
	SharedWith []interface{} `json:"shared_with"`

	// snooze until
	SnoozeUntil string `json:"snooze_until,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// subscribers
	Subscribers []interface{} `json:"subscribers"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this goals data items0
func (m *GoalsDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoalsDataItems0) validateChartData(formats strfmt.Registry) error {

	if swag.IsZero(m.ChartData) { // not required
		return nil
	}

	for i := 0; i < len(m.ChartData); i++ {
		if swag.IsZero(m.ChartData[i]) { // not required
			continue
		}

		if m.ChartData[i] != nil {
			if err := m.ChartData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chart_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GoalsDataItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GoalsDataItems0) validateModifiedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_at", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GoalsDataItems0) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoalsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoalsDataItems0) UnmarshalBinary(b []byte) error {
	var res GoalsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GoalsDataItems0ChartDataItems0 goals data items0 chart data items0
// swagger:model GoalsDataItems0ChartDataItems0
type GoalsDataItems0ChartDataItems0 struct {

	// actual seconds
	ActualSeconds int64 `json:"actual_seconds,omitempty"`

	// actual seconds text
	ActualSecondsText string `json:"actual_seconds_text,omitempty"`

	// goal seconds
	GoalSeconds int64 `json:"goal_seconds,omitempty"`

	// goal seconds text
	GoalSecondsText string `json:"goal_seconds_text,omitempty"`

	// range
	Range *GoalsDataItems0ChartDataItems0Range `json:"range,omitempty"`

	// range status
	RangeStatus string `json:"range_status,omitempty"`

	// range status reason
	RangeStatusReason string `json:"range_status_reason,omitempty"`
}

// Validate validates this goals data items0 chart data items0
func (m *GoalsDataItems0ChartDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoalsDataItems0ChartDataItems0) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoalsDataItems0ChartDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoalsDataItems0ChartDataItems0) UnmarshalBinary(b []byte) error {
	var res GoalsDataItems0ChartDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GoalsDataItems0ChartDataItems0Range goals data items0 chart data items0 range
// swagger:model GoalsDataItems0ChartDataItems0Range
type GoalsDataItems0ChartDataItems0Range struct {

	// date
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this goals data items0 chart data items0 range
func (m *GoalsDataItems0ChartDataItems0Range) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GoalsDataItems0ChartDataItems0Range) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GoalsDataItems0ChartDataItems0Range) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GoalsDataItems0ChartDataItems0Range) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("range"+"."+"start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GoalsDataItems0ChartDataItems0Range) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoalsDataItems0ChartDataItems0Range) UnmarshalBinary(b []byte) error {
	var res GoalsDataItems0ChartDataItems0Range
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GoalsDataItems0Owner goals data items0 owner
// swagger:model GoalsDataItems0Owner
type GoalsDataItems0Owner struct {

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// photo
	Photo string `json:"photo,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this goals data items0 owner
func (m *GoalsDataItems0Owner) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GoalsDataItems0Owner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GoalsDataItems0Owner) UnmarshalBinary(b []byte) error {
	var res GoalsDataItems0Owner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
