// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	internal "github.com/will7200/wakatime/internal"
)

// Stats stats
// swagger:model stats
type Stats struct {

	// best day
	BestDay *internal.BestDay `json:"best_day,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// daily average
	DailyAverage int64 `json:"daily_average,omitempty"`

	// days including holidays
	DaysIncludingHolidays int64 `json:"days_including_holidays,omitempty"`

	// days minus holidays
	DaysMinusHolidays int64 `json:"days_minus_holidays,omitempty"`

	// dependencies
	Dependencies []*StatsCategory `json:"dependencies"`

	// editors
	Editors []*StatsCategory `json:"editors"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// holidays
	Holidays int64 `json:"holidays,omitempty"`

	// human readable daily average
	HumanReadableDailyAverage string `json:"human_readable_daily_average,omitempty"`

	// human readable total
	HumanReadableTotal string `json:"human_readable_total,omitempty"`

	// is already updating
	IsAlreadyUpdating bool `json:"is_already_updating,omitempty"`

	// is coding activity visible
	IsCodingActivityVisible bool `json:"is_coding_activity_visible,omitempty"`

	// is other usage visible
	IsOtherUsageVisible bool `json:"is_other_usage_visible,omitempty"`

	// is stuck
	IsStuck bool `json:"is_stuck,omitempty"`

	// is up to date
	IsUpToDate bool `json:"is_up_to_date,omitempty"`

	// languages
	Languages []*StatsCategory `json:"languages"`

	// modified at
	// Format: date-time
	ModifiedAt strfmt.DateTime `json:"modified_at,omitempty"`

	// operating systems
	OperatingSystems []*StatsCategory `json:"operating_systems"`

	// projects
	Projects []*StatsCategory `json:"projects"`

	// range
	Range string `json:"range,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// total seconds
	TotalSeconds int64 `json:"total_seconds,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// writes only
	WritesOnly bool `json:"writes_only,omitempty"`
}

// Validate validates this stats
func (m *Stats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEditors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stats) validateBestDay(formats strfmt.Registry) error {

	if swag.IsZero(m.BestDay) { // not required
		return nil
	}

	if m.BestDay != nil {
		if err := m.BestDay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("best_day")
			}
			return err
		}
	}

	return nil
}

func (m *Stats) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateEditors(formats strfmt.Registry) error {

	if swag.IsZero(m.Editors) { // not required
		return nil
	}

	for i := 0; i < len(m.Editors); i++ {
		if swag.IsZero(m.Editors[i]) { // not required
			continue
		}

		if m.Editors[i] != nil {
			if err := m.Editors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateLanguages(formats strfmt.Registry) error {

	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateModifiedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_at", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stats) validateOperatingSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystems) { // not required
		return nil
	}

	for i := 0; i < len(m.OperatingSystems); i++ {
		if swag.IsZero(m.OperatingSystems[i]) { // not required
			continue
		}

		if m.OperatingSystems[i] != nil {
			if err := m.OperatingSystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operating_systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateProjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stats) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stats) UnmarshalBinary(b []byte) error {
	var res Stats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
