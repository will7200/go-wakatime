// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RangeLeaders range leaders
// swagger:model rangeLeaders
type RangeLeaders struct {

	// end date
	// Format: date
	EndDate strfmt.Date `json:"end_date,omitempty"`

	// end text
	EndText string `json:"end_text,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"start_date,omitempty"`

	// start text
	StartText string `json:"start_text,omitempty"`

	// text
	Text string `json:"text,omitempty"`
}

// Validate validates this range leaders
func (m *RangeLeaders) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RangeLeaders) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RangeLeaders) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RangeLeaders) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RangeLeaders) UnmarshalBinary(b []byte) error {
	var res RangeLeaders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
