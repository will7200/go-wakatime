// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Durations durations
// swagger:model durations
type Durations struct {

	// branches
	Branches []string `json:"branches"`

	// data
	Data []*DurationsDataItems0 `json:"data"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// start
	// Format: date-time
	Start strfmt.DateTime `json:"start,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this durations
func (m *Durations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Durations) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Durations) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Durations) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Durations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Durations) UnmarshalBinary(b []byte) error {
	var res Durations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DurationsDataItems0 durations data items0
// swagger:model DurationsDataItems0
type DurationsDataItems0 struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// cursorpos
	Cursorpos *string `json:"cursorpos,omitempty"`

	// duration
	Duration int64 `json:"duration,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// lineno
	Lineno *int64 `json:"lineno,omitempty"`

	// machine name id
	MachineNameID string `json:"machine_name_id,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// time
	Time float64 `json:"time,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this durations data items0
func (m *DurationsDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DurationsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DurationsDataItems0) UnmarshalBinary(b []byte) error {
	var res DurationsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
