// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Projects projects
// swagger:model projects
type Projects struct {

	// data
	Data []*ProjectsDataItems0 `json:"data"`
}

// Validate validates this projects
func (m *Projects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Projects) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Projects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Projects) UnmarshalBinary(b []byte) error {
	var res Projects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectsDataItems0 projects data items0
// swagger:model ProjectsDataItems0
type ProjectsDataItems0 struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// html escaped name
	HTMLEscapedName string `json:"html_escaped_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// privacy
	Privacy string `json:"privacy,omitempty"`

	// repository
	Repository *ProjectsDataItems0Repository `json:"repository,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this projects data items0
func (m *ProjectsDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectsDataItems0) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectsDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectsDataItems0) UnmarshalBinary(b []byte) error {
	var res ProjectsDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectsDataItems0Repository projects data items0 repository
// swagger:model ProjectsDataItems0Repository
type ProjectsDataItems0Repository struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fork count
	ForkCount int64 `json:"fork_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// homepage
	Homepage *string `json:"homepage,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is fork
	IsFork bool `json:"is_fork,omitempty"`

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// last synced at
	LastSyncedAt string `json:"last_synced_at,omitempty"`

	// modified at
	ModifiedAt string `json:"modified_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// star count
	StarCount int64 `json:"star_count,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// watch count
	WatchCount int64 `json:"watch_count,omitempty"`
}

// Validate validates this projects data items0 repository
func (m *ProjectsDataItems0Repository) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectsDataItems0Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectsDataItems0Repository) UnmarshalBinary(b []byte) error {
	var res ProjectsDataItems0Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
